<?xml version="1.0" encoding="utf-8"?>
<registry>
  <types comment="Type definitions">
    <!--Enums-->
    <type name="Status" category="enum" type="i32" doc="Represents main error communication source for the API.
Compare against {::Ok} for success.">
      <value name="Ok" value="0" doc="Operation succeded."/>
      <value name="Timeout" value="1" doc="Operation timed out.
Counts as a success value in some cases."/>
      <value name="Partial" value="2" doc="Operation partially succeeded.
Some times it means that core value is initialized,
but some functionality may be missing and may require
you to check if demanded functionality is in place."/>
      <value name="Error" value="-1" doc="Operation failed. Check {Result::error} for more details."/>
      <value name="InvalidArgument" value="-2" doc="One or more arguments, or parts of arguments
passed to the function were incorrect. Check {Result::error} for more details."/>
      <value name="OutOfMemory" value="-3" doc="There is no more host memory available.
Allocation with malloc or similar call has failed."/>
      <value name="DeviceLost" value="-4" doc="Device driver was forcefully stopped.
Most of the time happens on swapchain presentation."/>
      <value name="Occluded" value="-5" doc="Swapchain presentation was not visible to the user.
Rendering is too fast."/>
    </type>

    <type name="MutiWaitFlags" category="enum" type="u32"
          doc="Determines the behavior when wait for multiple fences is issued.">
      <value name="All" value="0" doc="All the fences in the batch are triggered."/>
      <value name="Any" value="1" doc="At least one of the fences from the batch is triggered."/>
    </type>


    <type name="AdapterPreference" category="enum" doc="Oreders the adapters according to preference
using builtin heuristics of underlying APIs.">
      <impl_type for="dx" name="DXGI_GPU_PREFERENCE" direct="true"/>
      <value name="None" value="0" doc="No particular preference, list adapters in system divised order."/>
      <value name="MinConsumption" value="1" doc="List the adapters from low power consumption to high.
Order is as follows: Integrated, Discrete, External, Software."/>
      <value name="Performance" value="2" doc="List the adapters from high performance to low.
Order is as follows: External, Discrete, Integrated, Software."/>
    </type>

    <type name="Severity" category="enum" doc="Log message severity.
Used with {DebugCallback::} and internal library logging.">
      <value name="Debug" value="0" doc="Message carries debug information."/>
      <value name="Trace" value="1" doc="Message contains trace point (function call stack info)."/>
      <value name="Info" value="2" doc="Message contains general information."/>
      <value name="Warning" value="3" doc="Message contains warning.
There is something wrong and it may affect performance or stability of the application."/>
      <value name="Error" value="4" doc="Message contains error.
Stability of the application is compromized."/>
      <value name="Critical" value="5" doc="Message contains critical error.
The application must be shut down, no further execution."/>
    </type>

    <type name="QueueType" category="enum" type="u32" doc="Type of the queue to create.">
      <value name="Graphics" value="0" doc="Queue is used for graphics operations."/>
      <value name="Compute" value="2" doc="Queue is used for compute operations."/>
      <value name="Copy" value="3" doc="Queue is used for copy operations."/>
      <value name="VideoDecode" value="4" doc="Queue is used for video decoding operations."/>
    </type>

    <type name="ShaderStages" category="enum" type="u32" doc="Shader stages that can be used in the pipeline.
Main use is Root signature and descriptor management.
Stages have no granularity, either all or one can be selected.">
      <impl_type for="dx" name="D3D12_SHADER_VISIBILITY" direct="true"/>
      <impl_type for="vk" name="VkShaderStageFlagBits" default="VK_SHADER_STAGE_ALL"/>
      <value name="All" value="0" doc="All shader stages.">
        <impl name="vk" value="VK_SHADER_STAGE_ALL"/>
      </value>
      <value name="Vertex" value="1" doc="Vertex shader stage.">
        <impl name="vk" value="VK_SHADER_STAGE_VERTEX_BIT"/>
      </value>
      <value name="Hull" value="2" doc="Hull/Tessellation control shader stage.">
        <impl name="vk" value="VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT"/>
      </value>
      <value name="Domain" value="3" doc="Domain/Tessellation evaluation shader stage.">
        <impl name="vk" value="VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT"/>
      </value>
      <value name="Geometry" value="4" doc="Geometry shader stage.">
        <impl name="vk" value="VK_SHADER_STAGE_GEOMETRY_BIT"/>
      </value>
      <value name="Pixel" value="5" doc="Pixel/Fragment shader stage.">
        <impl name="vk" value="VK_SHADER_STAGE_FRAGMENT_BIT"/>
      </value>
      <value name="Amplification" value="6" doc="Amplification shader stage.">
        <impl name="vk" value="VK_SHADER_STAGE_TASK_BIT_NV"/>
      </value>
      <value name="Mesh" value="7" doc="Mesh shader stage.">
        <impl name="vk" value="VK_SHADER_STAGE_MESH_BIT_NV"/>
      </value>
      <value name="Count" value="8" doc="Number of stages."/>
    </type>

    <type name="DescriptorType" category="enum" type="u32" doc="Type of the descriptor in the descriptor table.">
      <impl_type for="dx" name="D3D12_DESCRIPTOR_RANGE_TYPE"/>
      <impl_type for="vk" name="VkDescriptorType"/>
      <value name="ShaderResource" value="0" doc="Descriptor is a shader resource view.
Used for textures.">
        <impl name="vk" value="VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE"/>
        <impl name="dx" value="D3D12_DESCRIPTOR_RANGE_TYPE_SRV"/>
      </value>
      <value name="ConstantBuffer" value="1" doc="Descriptor is a constant buffer view.">
        <impl name="vk" value="VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER"/>
        <impl name="dx" value="D3D12_DESCRIPTOR_RANGE_TYPE_CBV"/>
      </value>
      <value name="UnorderedAccess" value="2" doc="Descriptor is an unordered access view.
Used for read/write operations in compute shaders.">
        <impl name="vk" value="VK_DESCRIPTOR_TYPE_STORAGE_BUFFER"/>
        <impl name="dx" value="D3D12_DESCRIPTOR_RANGE_TYPE_UAV"/>
      </value>
      <value name="Sampler" value="3" doc="Descriptor is a sampler.
Sampler is used to sample textures in shaders.
Stored in separate descriptor table and
can't be mixed with other descriptor types">
        <impl name="vk" value="VK_DESCRIPTOR_TYPE_SAMPLER"/>
        <impl name="dx" value="D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER"/>
      </value>
    </type>

    <type name="InputClass" category="enum" type="u32" doc="Input classification for vertex buffer data.">
      <value name="PerVertex" value="0" doc="Vertex buffer data is vertex data."/>
      <value name="PerInstance" value="1" doc="Vertex buffer data is per instance data."/>
    </type>

    <type name="DataFormat" category="enum" type="u32" doc="Data format for data.
Used as a template for data in several cases.
Can be used to describe:
- Vertex buffer data format
- Texture data format
- Render target data format
- Depth stencil data format">
      <impl_type for="dx" name="DXGI_FORMAT" direct="true "/>
      <impl_type for="vk" name="VkFormat"/>
      <value name="Unknown" value="0" doc="Unknown format."/>
      <value name="RGBA32Float" value="2" doc="32 bit per channel RGBA format.
A four-component, 128-bit signed floating-point format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7,
a 32-bit B component in bytes 8..11,
a 32-bit A component in bytes 12..15.">
        <impl name="vk" value="VK_FORMAT_R32G32B32A32_SFLOAT"/>
      </value>
      <value name="RGBA32Uint" value="3" doc="32 bit per channel RGBA format.
A four-component, 128-bit unsigned integer format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7,
a 32-bit B component in bytes 8..11,
a 32-bit A component in bytes 12..15.">
        <impl name="vk" value="VK_FORMAT_R32G32B32A32_UINT"/>
      </value>
      <value name="RGBA32Sint" value="4" doc="32 bit per channel RGBA format.
A four-component, 128-bit signed integer format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7,
a 32-bit B component in bytes 8..11,
a 32-bit A component in bytes 12..15.">
        <impl name="vk" value="VK_FORMAT_R32G32B32A32_SINT"/>
      </value>
      <value name="RGB32Float" value="6" doc="32 bit per channel RGB format.
A three-component, 96-bit signed floating-point format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7,
a 32-bit B component in bytes 8..11.">
        <impl name="vk" value="VK_FORMAT_R32G32B32_SFLOAT"/>
      </value>
      <value name="RGB32Uint" value="7" doc="32 bit per channel RGB format.
A three-component, 96-bit unsigned integer format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7,
a 32-bit B component in bytes 8..11.">
        <impl name="vk" value="VK_FORMAT_R32G32B32_UINT"/>
      </value>
      <value name="RGB32Sint" value="8" doc="32 bit per channel RGB format.
A three-component, 96-bit signed integer format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7,
a 32-bit B component in bytes 8..11.">
        <impl name="vk" value="VK_FORMAT_R32G32B32_SINT"/>
      </value>
      <value name="RGBA16Float" value="10" doc="16 bit per channel RGBA format.
A four-component, 64-bit signed floating-point format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3,
a 16-bit B component in bytes 4..5,
a 16-bit A component in bytes 6..7.">
        <impl name="vk" value="VK_FORMAT_R16G16B16A16_SFLOAT"/>
      </value>
      <value name="RGBA16Unorm" value="11" doc="16 bit per channel RGBA format.
A four-component, 64-bit unsigned normalized format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3,
a 16-bit B component in bytes 4..5,
a 16-bit A component in bytes 6..7.">
        <impl name="vk" value="VK_FORMAT_R16G16B16A16_UNORM"/>
      </value>
      <value name="RGBA16Uint" value="12" doc="16 bit per channel RGBA format.
A four-component, 64-bit unsigned integer format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3,
a 16-bit B component in bytes 4..5,
a 16-bit A component in bytes 6..7.">
        <impl name="vk" value="VK_FORMAT_R16G16B16A16_UINT"/>
      </value>
      <value name="RGBA16Snorm" value="13" doc="16 bit per channel RGBA format.
A four-component, 64-bit signed normalized format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3,
a 16-bit B component in bytes 4..5,
a 16-bit A component in bytes 6..7.">
        <impl name="vk" value="VK_FORMAT_R16G16B16A16_SNORM"/>
      </value>
      <value name="RGBA16Sint" value="14" doc="16 bit per channel RGBA format.
A four-component, 64-bit signed integer format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3,
a 16-bit B component in bytes 4..5,
a 16-bit A component in bytes 6..7.">
        <impl name="vk" value="VK_FORMAT_R16G16B16A16_SINT"/>
      </value>
      <value name="RG32Float" value="16" doc="32 bit per channel RG format.
A two-component, 64-bit signed floating-point format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7.">
        <impl name="vk" value="VK_FORMAT_R32G32_SFLOAT"/>
      </value>
      <value name="RG32Uint" value="17" doc="32 bit per channel RG format.
A two-component, 64-bit unsigned integer format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7.">
        <impl name="vk" value="VK_FORMAT_R32G32_UINT"/>
      </value>
      <value name="RG32Sint" value="18" doc="32 bit per channel RG format.
A two-component, 64-bit signed integer format that has
a 32-bit R component in bytes 0..3,
a 32-bit G component in bytes 4..7.">
        <impl name="vk" value="VK_FORMAT_R32G32_SINT"/>
      </value>
      <value name="D32FloatS8Uint" value="20" doc="32 bit depth, 8 bit stencil format.
A combined depth/stencil format with a 32-bit depth component in bytes 0..3
and an 8-bit stencil component in bytes 4..4.">
        <impl name="vk" value="VK_FORMAT_D32_SFLOAT_S8_UINT"/>
      </value>
      <value name="RGB10A2Unorm" value="24" doc="10 bit per channel RGB format with 2 bit alpha.
A four-component, 32-bit unsigned normalized format that has
a 10-bit R component in bits 0..9,
a 10-bit G component in bits 10..19,
a 10-bit B component in bits 20..29,
a 2-bit A component in bits 30..31.">
        <impl name="vk" value="VK_FORMAT_A2B10G10R10_UNORM_PACK32"/>
      </value>
      <value name="RGB10A2Uint" value="25" doc="10 bit per channel RGB format with 2 bit alpha.
A four-component, 32-bit unsigned integer format that has
a 10-bit R component in bits 0..9,
a 10-bit G component in bits 10..19,
a 10-bit B component in bits 20..29,
a 2-bit A component in bits 30..31.">
        <impl name="vk" value="VK_FORMAT_A2B10G10R10_UINT_PACK32"/>
      </value>
      <value name="RG11B10Float" value="26" doc="11 bit per channel RG format with 10 bit blue.
A three-component, 32-bit signed floating-point format that has
a 11-bit R component in bits 0..10,
a 11-bit G component in bits 11..21,
a 10-bit B component in bits 22..31.">
        <impl name="vk" value="VK_FORMAT_B10G11R11_UFLOAT_PACK32"/>
      </value>
      <value name="RGBA8Unorm" value="28" doc="8 bit per channel RGBA format.
A four-component, 32-bit unsigned normalized format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1,
an 8-bit B component in bytes 2..2,
an 8-bit A component in bytes 3..3.">
        <impl name="vk" value="VK_FORMAT_R8G8B8A8_UNORM"/>
      </value>
      <value name="RGBA8UnormSrgb" value="29" doc="8 bit per channel RGBA format. SRGB non-linear color space.
A four-component, 32-bit unsigned normalized non-linear SRGB format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1,
an 8-bit B component in bytes 2..2,
an 8-bit A component in bytes 3..3.">
        <impl name="vk" value="VK_FORMAT_R8G8B8A8_SRGB"/>
      </value>
      <value name="RGBA8Uint" value="30" doc="8 bit per channel RGBA format.
A four-component, 32-bit unsigned integer format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1,
an 8-bit B component in bytes 2..2,
an 8-bit A component in bytes 3..3.">
        <impl name="vk" value="VK_FORMAT_R8G8B8A8_UINT"/>
      </value>
      <value name="RGBA8Snorm" value="31" doc="8 bit per channel RGBA format.
A four-component, 32-bit signed normalized format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1,
an 8-bit B component in bytes 2..2,
an 8-bit A component in bytes 3..3.">
        <impl name="vk" value="VK_FORMAT_R8G8B8A8_SNORM"/>
      </value>
      <value name="RGBA8Sint" value="32" doc="8 bit per channel RGBA format.
A four-component, 32-bit signed integer format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1,
an 8-bit B component in bytes 2..2,
an 8-bit A component in bytes 3..3.">
        <impl name="vk" value="VK_FORMAT_R8G8B8A8_SINT"/>
      </value>
      <value name="RG16Float" value="34" doc="16 bit per channel RG format.
A two-component, 32-bit signed floating-point format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3.">
        <impl name="vk" value="VK_FORMAT_R16G16_SFLOAT"/>
      </value>
      <value name="RG16Unorm" value="35" doc="16 bit per channel RG format.
A two-component, 32-bit unsigned normalized format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3.">
        <impl name="vk" value="VK_FORMAT_R16G16_UNORM"/>
      </value>
      <value name="RG16Uint" value="36" doc="16 bit per channel RG format.
A two-component, 32-bit unsigned integer format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3.">
        <impl name="vk" value="VK_FORMAT_R16G16_UINT"/>
      </value>
      <value name="RG16Snorm" value="37" doc="16 bit per channel RG format.
A two-component, 32-bit signed normalized format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3.">
        <impl name="vk" value="VK_FORMAT_R16G16_SNORM"/>
      </value>
      <value name="RG16Sint" value="38" doc="16 bit per channel RG format.
A two-component, 32-bit signed integer format that has
a 16-bit R component in bytes 0..1,
a 16-bit G component in bytes 2..3.">
        <impl name="vk" value="VK_FORMAT_R16G16_SINT"/>
      </value>
      <value name="D32Float" value="40" doc="32 bit depth format.
A 32-bit depth format supporting 32-bit floating-point depth values.">
        <impl name="vk" value="VK_FORMAT_D32_SFLOAT"/>
      </value>
      <value name="R32Float" value="41" doc="32 bit per channel R format.
A one-component, 32-bit signed floating-point format that has
a 32-bit R component in bytes 0..3.">
        <impl name="vk" value="VK_FORMAT_R32_SFLOAT"/>
      </value>
      <value name="R32Uint" value="42" doc="32 bit per channel R format.
A one-component, 32-bit unsigned integer format that has
a 32-bit R component in bytes 0..3.">
        <impl name="vk" value="VK_FORMAT_R32_UINT"/>
      </value>
      <value name="R32Sint" value="43" doc="32 bit per channel R format.
A one-component, 32-bit signed integer format that has
a 32-bit R component in bytes 0..3.">
        <impl name="vk" value="VK_FORMAT_R32_SINT"/>
      </value>
      <value name="D24UnormS8Uint" value="45" doc="24 bit depth, 8 bit stencil format.
A combined depth/stencil format with a 24-bit depth component in bytes 0..2
and an 8-bit stencil component in bytes 3..3.">
        <impl name="vk" value="VK_FORMAT_D24_UNORM_S8_UINT"/>
      </value>
      <value name="RG8Unorm" value="49" doc="8 bit per channel RG format.
A two-component, 16-bit unsigned normalized format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1.">
        <impl name="vk" value="VK_FORMAT_R8G8_UNORM"/>
      </value>
      <value name="RG8Uint" value="50" doc="8 bit per channel RG format.
A two-component, 16-bit unsigned integer format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1.">
        <impl name="vk" value="VK_FORMAT_R8G8_UINT"/>
      </value>
      <value name="RG8Snorm" value="51" doc="8 bit per channel RG format.
A two-component, 16-bit signed normalized format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1.">
        <impl name="vk" value="VK_FORMAT_R8G8_SNORM"/>
      </value>
      <value name="RG8Sint" value="52" doc="8 bit per channel RG format.
A two-component, 16-bit signed integer format that has
an 8-bit R component in bytes 0..0,
an 8-bit G component in bytes 1..1.">
        <impl name="vk" value="VK_FORMAT_R8G8_SINT"/>
      </value>
      <value name="R16Float" value="54" doc="16 bit per channel R format.
A one-component, 16-bit signed floating-point format that has
a 16-bit R component in bytes 0..1.">
        <impl name="vk" value="VK_FORMAT_R16_SFLOAT"/>
      </value>
      <value name="D16Unorm" value="55" doc="16 bit depth format.
A 16-bit depth format supporting 16-bit unsigned normalized depth values.">
        <impl name="vk" value="VK_FORMAT_D16_UNORM"/>
      </value>
      <value name="R16Unorm" value="56" doc="16 bit per channel R format.
A one-component, 16-bit unsigned normalized format that has
a 16-bit R component in bytes 0..1.">
        <impl name="vk" value="VK_FORMAT_R16_UNORM"/>
      </value>
      <value name="R16Uint" value="57" doc="16 bit per channel R format.
A one-component, 16-bit unsigned integer format that has
a 16-bit R component in bytes 0..1.">
        <impl name="vk" value="VK_FORMAT_R16_UINT"/>
      </value>
      <value name="R16Snorm" value="58" doc="16 bit per channel R format.
A one-component, 16-bit signed normalized format that has
a 16-bit R component in bytes 0..1.">
        <impl name="vk" value="VK_FORMAT_R16_SNORM"/>
      </value>
      <value name="R16Sint" value="59" doc="16 bit per channel R format.
A one-component, 16-bit signed integer format that has
a 16-bit R component in bytes 0..1.">
        <impl name="vk" value="VK_FORMAT_R16_SINT"/>
      </value>
      <value name="R8Unorm" value="61" doc="8 bit per channel R format.
A one-component, 8-bit unsigned normalized format that has
an 8-bit R component in bytes 0..0.">
        <impl name="vk" value="VK_FORMAT_R8_UNORM"/>
      </value>
      <value name="R8Uint" value="62" doc="8 bit per channel R format.
A one-component, 8-bit unsigned integer format that has
an 8-bit R component in bytes 0..0.">
        <impl name="vk" value="VK_FORMAT_R8_UINT"/>
      </value>
      <value name="R8Snorm" value="63" doc="8 bit per channel R format.
A one-component, 8-bit signed normalized format that has
an 8-bit R component in bytes 0..0.">
        <impl name="vk" value="VK_FORMAT_R8_SNORM"/>
      </value>
      <value name="R8Sint" value="64" doc="8 bit per channel R format.
A one-component, 8-bit signed integer format that has
an 8-bit R component in bytes 0..0.">
        <impl name="vk" value="VK_FORMAT_R8_SINT"/>
      </value>
      <value name="RGB9E5UFloat" value="67" doc="9 bit per channel RGB format with shared exponent.
A three-component, 32-bit unsigned floating-point format that has
a 9-bit R component in bits 0..8,
a 9-bit G component in bits 9..17,
a 9-bit B component in bits 18..26,
a shared 5-bit exponent in bits 27..31.">
        <impl name="vk" value="VK_FORMAT_E5B9G9R9_UFLOAT_PACK32"/>
      </value>
      <value name="BC1RGBAUnorm" value="71" doc="BC1/DXT1 compressed format.
A four-component, block-compressed format where each 64-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized RGB texel data, and provides 1 bit of alpha.">
        <impl name="vk" value="VK_FORMAT_BC1_RGBA_UNORM_BLOCK"/>
      </value>
      <value name="BC1RGBAUnormSrgb" value="72" doc="BC1/DXT1 compressed format.
A four-component, block-compressed format where each 64-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized RGB texel data with sRGB nonlinear encoding, and provides 1 bit of alpha.">
        <impl name="vk" value="VK_FORMAT_BC1_RGBA_SRGB_BLOCK"/>
      </value>
      <value name="BC2RGBAUnorm" value="74" doc="BC2/DXT3 compressed format.
A four-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized RGBA texel data
with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values">
        <impl name="vk" value="VK_FORMAT_BC2_UNORM_BLOCK"/>
      </value>
      <value name="BC2RGBAUnormSrgb" value="75" doc="BC2/DXT3 compressed format.
A four-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized RGBA texel data with sRGB nonlinear encoding
with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values">
        <impl name="vk" value="VK_FORMAT_BC2_SRGB_BLOCK"/>
      </value>
      <value name="BC3RGBAUnorm" value="77" doc="BC3/DXT5 compressed format.
A four-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized RGBA texel data with the first 64 bits encoding alpha values
followed by 64 bits encoding RGB values">
        <impl name="vk" value="VK_FORMAT_BC3_UNORM_BLOCK"/>
      </value>
      <value name="BC3RGBAUnormSrgb" value="78" doc="BC3/DXT5 compressed format.
A four-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized RGBA texel data with sRGB nonlinear encoding
with the first 64 bits encoding alpha values followed by 64 bits encoding RGB values">
        <impl name="vk" value="VK_FORMAT_BC3_SRGB_BLOCK"/>
      </value>
      <value name="BC4RUnorm" value="80" doc="BC4 compressed format.
A single-component, block-compressed format where each 64-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized red texel data">
        <impl name="vk" value="VK_FORMAT_BC4_UNORM_BLOCK"/>
      </value>
      <value name="BC4RSnorm" value="81" doc="BC4 compressed format.
A single-component, block-compressed format where each 64-bit
compressed texel block encodes a 4×4 rectangle
of signed normalized red texel data">
        <impl name="vk" value="VK_FORMAT_BC4_SNORM_BLOCK"/>
      </value>
      <value name="BC5RGUnorm" value="83" doc="BC5 compressed format.
A two-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized red and green texel data">
        <impl name="vk" value="VK_FORMAT_BC5_UNORM_BLOCK"/>
      </value>
      <value name="BC5RGSnorm" value="84" doc="BC5 compressed format.
A two-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of signed normalized red and green texel data">
        <impl name="vk" value="VK_FORMAT_BC5_SNORM_BLOCK"/>
      </value>
      <value name="B5G6R5Unorm" value="85" doc="16 bit per channel RGB format.
A three-component, 16-bit unsigned normalized format that has
a 5-bit B component in bits 0..4,
a 6-bit G component in bits 5..10,
a 5-bit R component in bits 11..15.">
        <impl name="vk" value="VK_FORMAT_R5G6B5_UNORM_PACK16"/>
      </value>
      <value name="B5G5R5A1Unorm" value="86" doc="16 bit per channel RGBA format.
A four-component, 16-bit unsigned normalized format that has
a 5-bit B component in bits 0..4,
a 5-bit G component in bits 5..9,
a 5-bit R component in bits 10..14,
a 1-bit A component in bits 15..15.">
        <impl name="vk" value="VK_FORMAT_A1R5G5B5_UNORM_PACK16"/>
      </value>
      <value name="BGRA8Unorm" value="87" doc="8 bit per channel RGBA format.
A four-component, 32-bit unsigned normalized format that has
an 8-bit B component in bytes 0..0,
an 8-bit G component in bytes 1..1,
an 8-bit R component in bytes 2..2,
an 8-bit A component in bytes 3..3.">
        <impl name="vk" value="VK_FORMAT_B8G8R8A8_UNORM"/>
      </value>
      <value name="BGRA8UnormSrgb" value="91" doc="8 bit per channel RGBA format. SRGB non-linear color space.
A four-component, 32-bit unsigned normalized non-linear SRGB format that has
an 8-bit B component in bytes 0..0,
an 8-bit G component in bytes 1..1,
an 8-bit R component in bytes 2..2,
an 8-bit A component in bytes 3..3.">
        <impl name="vk" value="VK_FORMAT_B8G8R8A8_SRGB"/>
      </value>
      <value name="BC6HUfloat16" value="95" doc="BC6H compressed format.
A three-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of unsigned floating-point RGB texel data">
        <impl name="vk" value="VK_FORMAT_BC6H_UFLOAT_BLOCK"/>
      </value>
      <value name="BC6HSfloat16" value="96" doc="BC6H compressed format.
A three-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of signed floating-point RGB texel data">
        <impl name="vk" value="VK_FORMAT_BC6H_SFLOAT_BLOCK"/>
      </value>
      <value name="BC7RGBAUnorm" value="98" doc="BC7 compressed format.
A four-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized RGBA texel data">
        <impl name="vk" value="VK_FORMAT_BC7_UNORM_BLOCK"/>
      </value>
      <value name="BC7RGBAUnormSrgb" value="99" doc="BC7 compressed format.
A four-component, block-compressed format where each 128-bit
compressed texel block encodes a 4×4 rectangle
of unsigned normalized RGBA texel data with sRGB nonlinear encoding">
        <impl name="vk" value="VK_FORMAT_BC7_SRGB_BLOCK"/>
      </value>
      <value name="BGRA4Unorm" value="115" doc="4 bit per channel RGB format.
A four-component, 16-bit unsigned normalized format that has
a 4-bit B component in bits 0..3,
a 4-bit G component in bits 4..7,
a 4-bit R component in bits 8..11,
a 4-bit A component in bits 12..15.">
        <impl name="vk" value="VK_FORMAT_A4R4G4B4_UNORM_PACK16 "/>
      </value>
    </type>

    <type name="FillMode" category="enum" type="u32" doc="Fill mode for rasterizer.">
      <impl_type for="dx" name="D3D12_FILL_MODE" direct="true"/>
      <impl_type for="vk" name="VkPolygonMode"/>
      <value name="Lines" value="2" doc="Draw lines between vertices. Wireframe rendering.">
        <impl name="vk" value="VK_POLYGON_MODE_LINE"/>
      </value>
      <value name="Solid" value="3" doc="Fill the area between vertices forming polygons.">
        <impl name="vk" value="VK_POLYGON_MODE_FILL"/>
      </value>
    </type>

    <type name="CullMode" category="enum" type="u32" doc="Cull mode for rasterizer.
Triangle culling depends on {WindingOrder::} option.">
      <impl_type for="dx" name="D3D12_CULL_MODE" direct="true"/>
      <impl_type for="vk" name="VkCullModeFlags"/>
      <value name="None" value="1" doc="No culling.">
        <impl name="vk" value="VK_CULL_MODE_NONE"/>
      </value>
      <value name="Front" value="2" doc="Cull front-facing triangles.">
        <impl name="vk" value="VK_CULL_MODE_FRONT_BIT"/>
      </value>
      <value name="Back" value="3" doc="Cull back-facing triangles.">
        <impl name="vk" value="VK_CULL_MODE_BACK_BIT"/>
      </value>
    </type>

    <type name="WindingOrder" category="enum" type="u32" doc="Winding order for front-facing triangles.">
      <impl_type for="dx" name="BOOL" direct="true"/>
      <impl_type for="vk" name="VkFrontFace"/>
      <value name="Clockwise" value="0" doc="Front-facing triangles have clockwise winding order.">
        <impl name="vk" value="VK_FRONT_FACE_CLOCKWISE"/>
      </value>
      <value name="CounterClockwise" value="1" doc="Front-facing triangles have counter-clockwise winding order.">
        <impl name="vk" value="VK_FRONT_FACE_COUNTER_CLOCKWISE"/>
      </value>
    </type>

    <type name="SampleRate" category="enum" type="u32" doc="Sample rate for multisampling.">
      <impl_type for="dx" name="uint32_t" direct="true"/>
      <impl_type for="vk" name="VkSampleCountFlagBits"/>
      <value name="S1" value="1" doc="1 sample per pixel.">
        <impl name="vk" value="VK_SAMPLE_COUNT_1_BIT"/>
      </value>
      <value name="S2" value="2" doc="2 samples per pixel.">
        <impl name="vk" value="VK_SAMPLE_COUNT_2_BIT"/>
      </value>
      <value name="S4" value="4" doc="4 samples per pixel.">
        <impl name="vk" value="VK_SAMPLE_COUNT_4_BIT"/>
      </value>
      <value name="S8" value="8" doc="8 samples per pixel.">
        <impl name="vk" value="VK_SAMPLE_COUNT_8_BIT"/>
      </value>
      <value name="S16" value="16" doc="16 samples per pixel.">
        <impl name="vk" value="VK_SAMPLE_COUNT_16_BIT"/>
      </value>
    </type>

    <type name="Compare" category="enum" type="u32" doc="Comparison function for depth and stencil operations.">
      <impl_type for="dx" name="D3D12_COMPARISON_FUNC" direct="true"/>
      <impl_type for="vk" name="VkCompareOp"/>
      <value name="None" value="0" doc="No comparison.">
        <impl name="vk" value="VK_COMPARE_OP_NEVER"/>
      </value>
      <value name="Never" value="1" doc="Always fail the comparison.">
        <impl name="vk" value="VK_COMPARE_OP_NEVER"/>
      </value>
      <value name="Less" value="2" doc="Pass the comparison if the source value is less than the destination value.">
        <impl name="vk" value="VK_COMPARE_OP_LESS"/>
      </value>
      <value name="Equal" value="3" doc="Pass the comparison if the source value is equal to the destination value.">
        <impl name="vk" value="VK_COMPARE_OP_EQUAL"/>
      </value>
      <value name="LessEqual" value="4" doc="Pass the comparison if the source value is less than or equal to the destination value.">
        <impl name="vk" value="VK_COMPARE_OP_LESS_OR_EQUAL"/>
      </value>
      <value name="Greater" value="5" doc="Pass the comparison if the source value is greater than the destination value.">
        <impl name="vk" value="VK_COMPARE_OP_GREATER"/>
      </value>
      <value name="NotEqual" value="6" doc="Pass the comparison if the source value is not equal to the destination value.">
        <impl name="vk" value="VK_COMPARE_OP_NOT_EQUAL"/>
      </value>
      <value name="GreaterEqual" value="7" doc="Pass the comparison if the source value is greater than or equal to the destination value.">
        <impl name="vk" value="VK_COMPARE_OP_GREATER_OR_EQUAL"/>
      </value>
      <value name="Always" value="8" doc="Always pass the comparison.">
        <impl name="vk" value="VK_COMPARE_OP_ALWAYS"/>
      </value>
    </type>

    <type name="StencilOp" category="enum" type="u32" doc="Stencil operation for depth and stencil operations.">
      <impl_type for="dx" name="D3D12_STENCIL_OP" direct="true"/>
      <impl_type for="vk" name="VkStencilOp"/>
      <value name="Keep" value="1" doc="Keep the current value.">
        <impl name="vk" value="VK_STENCIL_OP_KEEP"/>
      </value>
      <value name="Zero" value="2" doc="Set the value to zero.">
        <impl name="vk" value="VK_STENCIL_OP_ZERO"/>
      </value>
      <value name="Replace" value="3" doc="Replace the value with the reference value.">
        <impl name="vk" value="VK_STENCIL_OP_REPLACE"/>
      </value>
      <value name="IncClamp" value="4" doc="Increment the value and clamp to the maximum value.">
        <impl name="vk" value="VK_STENCIL_OP_INCREMENT_AND_CLAMP"/>
      </value>
      <value name="DecClamp" value="5" doc="Decrement the value and clamp to the minimum value.">
        <impl name="vk" value="VK_STENCIL_OP_DECREMENT_AND_CLAMP"/>
      </value>
      <value name="Invert" value="6" doc="Invert the value.">
        <impl name="vk" value="VK_STENCIL_OP_INVERT"/>
      </value>
      <value name="IncWrap" value="7" doc="Increment the value and wrap to zero when the maximum value is exceeded.">
        <impl name="vk" value="VK_STENCIL_OP_INCREMENT_AND_WRAP"/>
      </value>
      <value name="DecWrap" value="8" doc="Decrement the value and wrap to the maximum value when the minimum value is exceeded.">
        <impl name="vk" value="VK_STENCIL_OP_DECREMENT_AND_WRAP"/>
      </value>
    </type>

    <type name="BlendFactor" category="enum" type="u32" doc="Blend factor for color blending operations.">
      <impl_type for="dx" name="D3D12_BLEND" direct="true"/>
      <impl_type for="vk" name="VkBlendFactor"/>
      <value name="Zero" value="1" doc="Use zero for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_ZERO"/>
      </value>
      <value name="One" value="2" doc="Use one for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_ONE"/>
      </value>
      <value name="SrcColor" value="3" doc="Use the source color for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_SRC_COLOR"/>
      </value>
      <value name="InvSrcColor" value="4" doc="Use the inverse source color for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR"/>
      </value>
      <value name="SrcAlpha" value="5" doc="Use the source alpha for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_SRC_ALPHA"/>
      </value>
      <value name="InvSrcAlpha" value="6" doc="Use the inverse source alpha for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA"/>
      </value>
      <value name="DestAlpha" value="7" doc="Use the destination alpha for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_DST_ALPHA"/>
      </value>
      <value name="InvDestAlpha" value="8" doc="Use the inverse destination alpha for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA"/>
      </value>
      <value name="DestColor" value="9" doc="Use the destination color for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_DST_COLOR"/>
      </value>
      <value name="InvDestColor" value="10" doc="Use the inverse destination color for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR"/>
      </value>
      <value name="SrcAlphaSat" value="11" doc="Use the source alpha saturated for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_SRC_ALPHA_SATURATE"/>
      </value>
      <value name="BlendFactor" value="14" doc="Use a constant blend factor for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_CONSTANT_COLOR"/>
      </value>
      <value name="InvBlendFactor" value="15" doc="Use the inverse constant blend factor for blending.">
        <impl name="vk" value="VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR"/>
      </value>
      <value name="Src1Color" value="16" doc="Use the source color for blending. Dual source blending mode.">
        <impl name="vk" value="VK_BLEND_FACTOR_SRC1_COLOR"/>
      </value>
      <value name="InvSrc1Color" value="17" doc="Use the inverse source color for blending. Dual source blending mode.">
        <impl name="vk" value="VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR"/>
      </value>
      <value name="Src1Alpha" value="18" doc="Use the source alpha for blending. Dual source blending mode.">
        <impl name="vk" value="VK_BLEND_FACTOR_SRC1_ALPHA"/>
      </value>
      <value name="InvSrc1Alpha" value="19" doc="Use the inverse source alpha for blending. Dual source blending mode.">
        <impl name="vk" value="VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA"/>
      </value>
    </type>

    <type name="BlendOp" category="enum" type="u32" doc="Blend operation for color blending operations.">
      <impl_type for="dx" name="D3D12_BLEND_OP" direct="true"/>
      <impl_type for="vk" name="VkBlendOp"/>
      <value name="Add" value="1" doc="Add the source and destination colors.">
        <impl name="vk" value="VK_BLEND_OP_ADD"/>
      </value>
      <value name="Subtract" value="2" doc="Subtract the source color from the destination color.">
        <impl name="vk" value="VK_BLEND_OP_SUBTRACT"/>
      </value>
      <value name="RevSubtract" value="3" doc="Subtract the destination color from the source color.">
        <impl name="vk" value="VK_BLEND_OP_REVERSE_SUBTRACT"/>
      </value>
      <value name="Min" value="4" doc="Use the minimum of the source and destination colors.">
        <impl name="vk" value="VK_BLEND_OP_MIN"/>
      </value>
      <value name="Max" value="5" doc="Use the maximum of the source and destination colors.">
        <impl name="vk" value="VK_BLEND_OP_MAX"/>
      </value>
    </type>

    <type name="LogicOp" category="enum" type="u32" doc="Logic operation for color blending operations.">
      <impl_type for="dx" name="D3D12_LOGIC_OP" direct="true"/>
      <impl_type for="vk" name="VkLogicOp"/>
      <value name="Clear" value="0" doc="Clear the destination value.">
        <impl name="vk" value="VK_LOGIC_OP_CLEAR"/>
      </value>
      <value name="Set" value="1" doc="Set the destination value.">
        <impl name="vk" value="VK_LOGIC_OP_SET"/>
      </value>
      <value name="Copy" value="2" doc="Copy the source value to the destination.">
        <impl name="vk" value="VK_LOGIC_OP_COPY"/>
      </value>
      <value name="CopyInverted" value="3" doc="Copy the inverted source value to the destination.">
        <impl name="vk" value="VK_LOGIC_OP_COPY_INVERTED"/>
      </value>
      <value name="Noop" value="4" doc="Do not modify the destination value.">
        <impl name="vk" value="VK_LOGIC_OP_NO_OP"/>
      </value>
      <value name="Invert" value="5" doc="Invert the destination value.">
        <impl name="vk" value="VK_LOGIC_OP_INVERT"/>
      </value>
      <value name="And" value="6" doc="Perform a bitwise AND operation on the source and destination values.">
        <impl name="vk" value="VK_LOGIC_OP_AND"/>
      </value>
      <value name="Nand" value="7" doc="Perform a bitwise NAND operation on the source and destination values.">
        <impl name="vk" value="VK_LOGIC_OP_NAND"/>
      </value>
      <value name="Or" value="8" doc="Perform a bitwise OR operation on the source and destination values.">
        <impl name="vk" value="VK_LOGIC_OP_OR"/>
      </value>
      <value name="Nor" value="9" doc="Perform a bitwise NOR operation on the source and destination values.">
        <impl name="vk" value="VK_LOGIC_OP_NOR"/>
      </value>
      <value name="Xor" value="10" doc="Perform a bitwise XOR operation on the source and destination values.">
        <impl name="vk" value="VK_LOGIC_OP_XOR"/>
      </value>
      <value name="Equiv" value="11" doc="Perform a bitwise equivalent operation on the source and destination values.">
        <impl name="vk" value="VK_LOGIC_OP_EQUIVALENT"/>
      </value>
      <value name="AndReverse" value="12" doc="Perform a bitwise AND operation on the source and inverted destination values.">
        <impl name="vk" value="VK_LOGIC_OP_AND_REVERSE"/>
      </value>
      <value name="AndInverted" value="13" doc="Perform a bitwise AND operation on the inverted source and destination values.">
        <impl name="vk" value="VK_LOGIC_OP_AND_INVERTED"/>
      </value>
      <value name="OrReverse" value="14" doc="Perform a bitwise OR operation on the source and inverted destination values.">
        <impl name="vk" value="VK_LOGIC_OP_OR_REVERSE"/>
      </value>
      <value name="OrInverted" value="15" doc="Perform a bitwise OR operation on the inverted source and destination values.">
        <impl name="vk" value="VK_LOGIC_OP_OR_INVERTED"/>
      </value>
    </type>

    <type name="MemoryType" category="enum" type="u32" doc="Memory type for resource allocation.">
      <impl_type for="dx" name="D3D12_HEAP_TYPE"/>
      <impl_type for="vk" name="VkMemoryPropertyFlags"/>
      <value name="Default" value="0" doc="Default memory type.
Local device memory, most efficient for rendering.">
        <impl name="dx" value="D3D12_HEAP_TYPE_DEFAULT"/>
        <impl name="vk" value="VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT"/>
      </value>
      <value name="Upload" value="1" doc="Upload memory type.
Used for data that is uploaded to the GPU Local memory using copy operations.">
        <impl name="dx" value="D3D12_HEAP_TYPE_UPLOAD"/>
        <impl name="vk" value="VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT"/>
      </value>
      <value name="Readback" value="2" doc="Readback memory type.
Used for data that is read back from the GPU Local memory using copy operations.">
        <impl name="dx" value="D3D12_HEAP_TYPE_READBACK"/>
        <impl name="vk" value="VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_CACHED_BIT"/>
      </value>
      <value name="GPUUpload" value="3" doc="GPU upload memory type.
Used for data that is directly uploaded to the GPU Local memory using copy operations.
Can be used only with Extended Allocation extension enabled and supported.
Usage outside of the Extended Allocation is undefined behavior.
Usage with buffers requires allocating memory on GPUUpload heap and mapping the memory.">
        <impl name="dx" value="D3D12_HEAP_TYPE_GPU_UPLOAD"/>
        <impl name="vk" value="VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT | VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT"/>
      </value>
    </type>

    <type name="ShaderIntermediate" category="enum" type="u32" doc="Intermediate shader representation.">
      <value name="DXIL" value="0" doc="DirectX Intermediate Language."/>
      <value name="SPIRV" value="1" doc="Standard Portable Intermediate Representation for Vulkan."/>
    </type>

    <type name="TextureState" category="enum" type="u32" doc="Texture state for resource transitions.">
      <impl_type for="dx" name="D3D12_BARRIER_LAYOUT"/>
      <impl_type for="vk" name="VkImageLayout"/>
      <value name="Undefined" value="4294967295" doc="Undefined state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_UNDEFINED"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_UNDEFINED"/>
      </value>
      <value name="Common" value="0" doc="Common state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_COMMON"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_GENERAL"/>
      </value>
      <value name="Read" value="1" doc="General Read state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_GENERIC_READ"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL"/>
      </value>
      <value name="RenderTarget" value="2" doc="Render Target state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_RENDER_TARGET"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL"/>
      </value>
      <value name="UnorderedAccess" value="3" doc="Unordered Access state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_UNORDERED_ACCESS"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL"/>
      </value>
      <value name="DepthStencilWrite" value="4" doc="Depth Stencil Write state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_DEPTH_STENCIL_WRITE"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL"/>
      </value>
      <value name="DepthStencilRead" value="5" doc="Depth Stencil Read state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_DEPTH_STENCIL_READ"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL"/>
      </value>
      <value name="ShaderResource" value="6" doc="Shader Resource state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_SHADER_RESOURCE"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL"/>
      </value>
      <value name="CopySource" value="7" doc="Copy Source state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_COPY_SOURCE"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL"/>
      </value>
      <value name="CopyDest" value="8" doc="Copy Destination state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_COPY_DEST"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL"/>
      </value>
      <value name="Present" value="9" doc="Present swapchain state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_PRESENT"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_PRESENT_SRC_KHR"/>
      </value>
      <value name="ShadingRate" value="10" doc="Shading Rate state. Used for Variable Shading Rate.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_SHADING_RATE_SOURCE"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR"/>
      </value>
      <value name="VideoDecodeRead" value="11" doc="Video Decode Read state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_VIDEO_DECODE_READ"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR"/>
      </value>
      <value name="VideoDecodeWrite" value="12" doc="Video Decode Write state.">
        <impl name="dx" value="D3D12_BARRIER_LAYOUT_VIDEO_DECODE_WRITE"/>
        <impl name="vk" value="VK_IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR"/>
      </value>
    </type>

    <type name="TextureLayout" category="enum" type="u32" doc="Texture layout. Determines how texture will be accessed.">
      <value name="Texture1D" value="2" doc="Texture is 1D array of data. Behaves similarly to Buffer."/>
      <value name="Texture1DArray" value="3" doc="Texture is an array of 1D data."/>
      <value name="Texture2D" value="4" doc="Texture is 2D image, default texture type."/>
      <value name="Texture2DArray" value="5" doc="Texture is an array of 2D images. Can also be used for Cube maps."/>
      <value name="Texture2DMS" value="6" doc="Texture is 2D multisampled image."/>
      <value name="Texture2DMSArray" value="7" doc="Texture is an array of 2D multisampled images."/>
      <value name="Texture3D" value="8" doc="Texture is 3D volume."/>
    </type>

    <type name="DescriptorHeapType" category="enum" type="u32" doc="Descriptor heap type.">
      <impl_type for="dx" name="D3D12_DESCRIPTOR_HEAP_TYPE" direct="true"/>
      <value name="Descriptor" value="0" doc="Descriptor heap type.
Used for all descriptor types, except for samplers."/>
      <value name="Sampler" value="1" doc="Sampler heap type.
Used for sampler descriptors."/>
    </type>

    <type name="DescriptorMemory" category="enum" type="u32" doc="Descriptor memory type.
Decides if descriptors are visible and can be bound to GPU.">
      <impl_type for="dx" name="D3D12_DESCRIPTOR_HEAP_FLAGS" direct="true"/>
      <value name="CpuOnly" value="0" doc="Descriptors are only visible to CPU.
May be used for copying descriptors to the GPU visible pool."/>
      <value name="ShaderVisible" value="1" doc="Descriptors are visible to GPU.
Descriptors can be bound to the GPU pipeline directly."/>
    </type>

    <type name="LoadOperation" category="enum" type="u32" doc="Attachment load operation for render pass.">
      <impl_type for="vk" name="VkAttachmentLoadOp"/>
      <impl_type for="dx" name="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE"/>
      <value name="Load" value="0" doc="Load the attachment contents.">
        <impl name="dx" value="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE"/>
        <impl name="vk" value="VK_ATTACHMENT_LOAD_OP_LOAD"/>
      </value>
      <value name="Clear" value="1" doc="Clear the attachment contents.">
        <impl name="dx" value="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR"/>
        <impl name="vk" value="VK_ATTACHMENT_LOAD_OP_CLEAR"/>
      </value>
      <value name="DontCare" value="2" doc="Do not care about the attachment contents.">
        <impl name="dx" value="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD"/>
        <impl name="vk" value="VK_ATTACHMENT_LOAD_OP_DONT_CARE"/>
      </value>
    </type>

    <type name="StoreOperation" category="enum" type="u32" doc="Attachment store operation for render pass.">
      <impl_type for="vk" name="VkAttachmentStoreOp"/>
      <impl_type for="dx" name="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE"/>
      <value name="Store" value="0" doc="Store the attachment contents.">
        <impl name="dx" value="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE"/>
        <impl name="vk" value="VK_ATTACHMENT_STORE_OP_STORE"/>
      </value>
      <value name="DontCare" value="1" doc="Do not care about the attachment contents.">
        <impl name="dx" value="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD"/>
        <impl name="vk" value="VK_ATTACHMENT_STORE_OP_DONT_CARE"/>
      </value>
      <value name="Resolve" value="2" doc="Resolve the attachment contents. Used for multisampling attachments.">
        <impl name="dx" value="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE"/>
        <impl name="vk" value="VK_ATTACHMENT_STORE_OP_STORE"/>
      </value>
    </type>

    <type name="PrimitiveTopology" category="enum" type="u32" doc="Primitive topology for rendering.
More info could be found [here](https://learn.microsoft.com/en-us/windows/win32/direct3d11/d3d10-graphics-programming-guide-primitive-topologies).">
      <impl_type for="dx" name="D3D_PRIMITIVE_TOPOLOGY"/>
      <impl_type for="vk" name="VkPrimitiveTopology"/>
      <value name="PointList" value="1" doc="Render points for each vertex.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_POINTLIST"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_POINT_LIST"/>
      </value>
      <value name="LineList" value="2" doc="Render lines between vertices.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_LINELIST"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_LINE_LIST"/>
      </value>
      <value name="LineStrip" value="3" doc="Render lines between vertices in a strip.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_LINESTRIP"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP"/>
      </value>
      <value name="TriangleList" value="4" doc="Render triangles between vertices.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST"/>
      </value>
      <value name="TriangleStrip" value="5" doc="Render triangles between vertices in a strip.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP"/>
      </value>
      <value name="TriangleFan" value="6" doc="Interpret vertex data to form a fan of triangles.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_TRIANGLEFAN"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN"/>
      </value>
      <value name="LineListAdj" value="10" doc="Render lines between vertices with adjacency.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY"/>
      </value>
      <value name="LineStripAdj" value="11" doc="Render lines between vertices in a strip with adjacency.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY"/>
      </value>
      <value name="TriangleListAdj" value="12" doc="Render triangles between vertices with adjacency.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY"/>
      </value>
      <value name="TriangleStripAdj" value="13" doc="Render triangles between vertices in a strip with adjacency.">
        <impl name="dx" value="D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY"/>
      </value>
    </type>

    <type name="TopologyType" category="enum" type="u32" doc="Primitive topology type for rendering.">
      <impl_type for="dx" name="D3D12_PRIMITIVE_TOPOLOGY_TYPE"/>
      <impl_type for="vk" name="VkPrimitiveTopology"/>
      <value name="Point" value="1" doc="Render points for each vertex.">
        <impl name="dx" value="D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_POINT_LIST"/>
      </value>
      <value name="Line" value="2" doc="Render lines between vertices.">
        <impl name="dx" value="D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_LINE_LIST"/>
      </value>
      <value name="Triangle" value="3" doc="Render triangles between vertices.">
        <impl name="dx" value="D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST"/>
      </value>
      <value name="Patch" value="4" doc="Vertices are interpret as patch list. Used in tesselation process.">
        <impl name="dx" value="D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH"/>
        <impl name="vk" value="VK_PRIMITIVE_TOPOLOGY_PATCH_LIST"/>
      </value>
    </type>

    <type name="Filter" category="enum" type="u32" doc="Filtering mode for texture sampling.">
      <impl_type for="vk" name="VkFilter"/>
      <impl_type for="dx" name="D3D12_FILTER_TYPE"/>
      <value name="Point" value="0" doc="Nearest neighbor filtering.">
        <impl name="vk" value="VK_FILTER_NEAREST"/>
        <impl name="dx" value="D3D12_FILTER_TYPE_POINT"/>
      </value>
      <value name="Linear" value="1" doc="Linear filtering.">
        <impl name="vk" value="VK_FILTER_LINEAR"/>
        <impl name="dx" value="D3D12_FILTER_TYPE_LINEAR"/>
      </value>
    </type>

    <type name="AddressMode" category="enum" type="u32" doc="Address mode for texture sampling.">
      <impl_type for="vk" name="VkSamplerAddressMode"/>
      <impl_type for="dx" name="D3D12_TEXTURE_ADDRESS_MODE"/>
      <value name="Repeat" value="0" doc="Repeat the texture.">
        <impl name="vk" value="VK_SAMPLER_ADDRESS_MODE_REPEAT"/>
        <impl name="dx" value="D3D12_TEXTURE_ADDRESS_MODE_WRAP"/>
      </value>
      <value name="MirroredRepeat" value="1" doc="Repeat the texture with mirroring.">
        <impl name="vk" value="VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT"/>
        <impl name="dx" value="D3D12_TEXTURE_ADDRESS_MODE_MIRROR"/>
      </value>
      <value name="ClampToEdge" value="2" doc="Clamp the texture to the edge.">
        <impl name="vk" value="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE"/>
        <impl name="dx" value="D3D12_TEXTURE_ADDRESS_MODE_CLAMP"/>
      </value>
      <value name="ClampToBorder" value="3" doc="Clamp the texture to the border.">
        <impl name="vk" value="VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER"/>
        <impl name="dx" value="D3D12_TEXTURE_ADDRESS_MODE_BORDER"/>
      </value>
      <value name="MirrorClampToEdge" value="4" doc="Mirror and clamp the texture to the edge.">
        <impl name="vk" value="VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE"/>
        <impl name="dx" value="D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE"/>
      </value>
    </type>

    <type name="TextureViewType" category="enum" type="u32" doc="Texture view type.">
      <impl_type for="vk" name="VkImageViewType"/>
      <impl_type for="dx" name="D3D12_SRV_DIMENSION"/>
      <value name="Texture1D" value="0" doc="Texture is 1D array of data. Behaves similarly to Buffer.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_1D"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURE1D"/>
      </value>
      <value name="Texture1DArray" value="1" doc="Texture is an array of 1D data.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_1D_ARRAY"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURE1DARRAY"/>
      </value>
      <value name="Texture2D" value="2" doc="Texture is 2D image, default texture type.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_2D"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURE2D"/>
      </value>
      <value name="Texture2DArray" value="3" doc="Texture is an array of 2D images.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_2D_ARRAY"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURE2DARRAY"/>
      </value>
      <value name="Texture2DMS" value="4" doc="Texture is 2D multisampled image.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_2D"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURE2DMS"/>
      </value>
      <value name="Texture2DMSArray" value="5" doc="Texture is an array of 2D multisampled images.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_2D_ARRAY"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY"/>
      </value>
      <value name="Texture3D" value="6" doc="Texture is 3D volume.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_3D"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURE3D"/>
      </value>
      <value name="TextureCube" value="7" doc="Texture is a cube map.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_CUBE"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURECUBE"/>
      </value>
      <value name="TextureCubeArray" value="8" doc="Texture is an array of cube maps.">
        <impl name="vk" value="VK_IMAGE_VIEW_TYPE_CUBE_ARRAY"/>
        <impl name="dx" value="D3D12_SRV_DIMENSION_TEXTURECUBEARRAY"/>
      </value>
    </type>

    <type name="ComponentSwizzle" category="enum" type="u32" doc="Component swizzle for texture sampling.">
      <impl_type for="dx" name="D3D12_SHADER_COMPONENT_MAPPING" direct="true"/>
      <impl_type for="vk" name="VkComponentSwizzle"/>
      <value name="Red" value="0" doc="Use the red component for sampling.">
        <impl name="vk" value="VK_COMPONENT_SWIZZLE_R"/>
      </value>
      <value name="Green" value="1" doc="Use the green component for sampling.">
        <impl name="vk" value="VK_COMPONENT_SWIZZLE_G"/>
      </value>
      <value name="Blue" value="2" doc="Use the blue component for sampling.">
        <impl name="vk" value="VK_COMPONENT_SWIZZLE_B"/>
      </value>
      <value name="Alpha" value="3" doc="Use the alpha component for sampling.">
        <impl name="vk" value="VK_COMPONENT_SWIZZLE_A"/>
      </value>
      <value name="Zero" value="4" doc="Use zero for sampling.">
        <impl name="vk" value="VK_COMPONENT_SWIZZLE_ZERO"/>
      </value>
      <value name="One" value="5" doc="Use one for sampling.">
        <impl name="vk" value="VK_COMPONENT_SWIZZLE_ONE"/>
      </value>
    </type>

    <type name="IndexType" category="enum" type="u32" doc="Index type for index buffer.
Enum values resemble the byte stride of the format.">
      <impl_type for="dx" name="DXGI_FORMAT"/>
      <impl_type for="vk" name="VkIndexType"/>
      <value name="UInt16" value="2" doc="16-bit unsigned integer index type.">
        <impl name="dx" value="DXGI_FORMAT_R16_UINT"/>
        <impl name="vk" value="VK_INDEX_TYPE_UINT16"/>
      </value>
      <value name="UInt32" value="4" doc="32-bit unsigned integer index type.">
        <impl name="dx" value="DXGI_FORMAT_R32_UINT"/>
        <impl name="vk" value="VK_INDEX_TYPE_UINT32"/>
      </value>
    </type>

    <type name="DeviceFeature" category="enum" type="u32" doc="Features that device may support.
Query by calling with Device::QueryFeatureSupport. Contains core features with optional ones.">
      <value name="DescriptorBuffer" value="0" doc="Core Functionality. Descriptor buffer support for VK, always true for DX12.
Vulkan provides DescriptorPool and DescriptorSet functionalities, that have to be used manually through library internals."/>
      <value name="EnchancedBarriers" value="1" doc="Core Functionality. Supports enhanced barriers. Support for VK and DX12.
Used in all barriers to provide more control over synchronization. Without the feature behavior is undefined.
To run without this feature for DX12 there are legacy barriers, which can be manually submitted through CommandList internals.
Vulkan will not work, as half of current functionality depends on VK_KHR_synchronization2."/>
      <value name="WaitForPresent" value="2" doc="Supports waiting for present to finish. Support for VK, always true for DX12.
Unlocks Swapchain::WaitForPresent."/>
      <value name="DescriptorEqualSize" value="3" doc="Descriptor size for SRV UAV and CBV are equal in size, support for VK, always true for DX12.
Unlocks DescriptorBuffer::WriteShaderResource2, DescriptorBuffer::WriteConstantBuffer2 functions. Without the feature their behavior is undefined."/>
      <value name="AdvancedIndexBuffer" value="4" doc="Supports advanced index buffer features. Support for VK, always true for DX12.
Unlocks CommandList::IASetIndexBuffer2 function. Without the extension behavior is undefined."/>
      <value name="DynamicVSync" value="5" doc="Supports dynamic VSync. Support for VK, always true for DX12.
Unlocks Swapchain::Present2 function. Without the extension behavior is the same as Swapchain::Present."/>
    </type>

    <!--Bitmasks-->
    <type name="AdapterFlags" category="bitmask" doc="Flags that describe adapter.">
      <value name="None" value="0" doc="No flags set. Adapter may be descrete or embedded."/>
      <value name="Remote" bit="0" doc="Adapter is remote. Used for remote rendering."/>
      <value name="Software" bit="1" doc="Adapter is software. Used for software rendering."/>
    </type>

    <type name="DSSelect" category="bitmask" doc="Depth stencil select flags.
Affect which part of the depth stencil buffer is used.">
      <value name="None" value="0" doc="No flags set. Depth stencil buffer is not used."/>
      <value name="Depth" bit="0" doc="Use depth part of the depth stencil buffer."/>
      <value name="Stencil" bit="1" doc="Use stencil part of the depth stencil buffer."/>
      <value name="DepthStencil" value="3" doc="Use both depth and stencil parts of the depth stencil buffer."/>
    </type>

    <type name="ColorComponents" category="bitmask" doc="Color component flags.
Used for color blending operations.">
      <value name="None" value="0" doc="No flags set. Color blending is not used."/>
      <value name="R" bit="0" doc="Use red component for blending."/>
      <value name="G" bit="1" doc="Use green component for blending."/>
      <value name="B" bit="2" doc="Use blue component for blending."/>
      <value name="A" bit="3" doc="Use alpha component for blending."/>
      <value name="All" value="15" doc="Use all color components for blending."/>
    </type>

    <type name="BufferUsage" category="bitmask" doc="Buffer usage flags.
Determine how the buffer can be used throughout its lifetime.">
      <value name="None" value="0" doc="No flags set. Buffer is not used."/>
      <value name="CopySrc" bit="0" doc="Buffer is used as a source for copy operations."/>
      <value name="CopyDst" bit="1" doc="Buffer is used as a destination for copy operations."/>
      <value name="ConstantBuffer" bit="4" doc="Buffer is used as a constant buffer."/>
      <value name="IndexBuffer" bit="6" doc="Buffer is used as an index buffer."/>
      <value name="VertexBuffer" bit="7" doc="Buffer is used as a vertex buffer or an instance buffer."/>
    </type>

    <type name="MemoryFlags" category="bitmask" doc="Memory flags.
Determine optional properties of the memory allocation.">
      <impl_type for="vk" name="VmaAllocationCreateFlags"/>
      <impl_type for="dx" name="D3D12MA::ALLOCATION_FLAGS"/>
      <value name="None" value="0" doc="No flags set. Memory is regular."/>
      <value name="DedicatedAllocation" bit="0" doc="Memory is dedicated.
Used for resources that require dedicated memory.
Useful for big resources that are not shared with other resources.
E.g. fullscreen textures, big buffers, etc.">
        <impl name="vk" value="VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT"/>
        <impl name="dx" value="D3D12MA::ALLOCATION_FLAG_COMMITTED"/>
      </value>
      <value name="Mapped" bit="1" doc="Memory is mapped.
Used in combination with {MemoryType::Upload} or {MemoryType::Readback} to map memory for CPU access.">
        <impl name="vk" value="VMA_ALLOCATION_CREATE_MAPPED_BIT"/>
        <impl name="dx" value="D3D12MA::ALLOCATION_FLAG_NONE"/>
      </value>
      <value name="Exportable" bit="2" doc="Memory is exportable.
If set, memory can be exported to other processes or APIs.
Works only with Device Local memory ({MemoryType::Default}) and only on AllocateXMemory calls.
Outside of AllocateXMemory the flag is ignored."/>
    </type>

    <type name="BarrierSync" category="bitmask" doc="Barrier synchronization flags.
Used to synchronize resources between different stages of the pipeline.">
      <impl_type for="dx" name="D3D12_BARRIER_SYNC"/>
      <impl_type for="vk" name="VkPipelineStageFlags2"/>
      <value name="None" value="0" doc="No flags set. No synchronization is performed."/>
      <value name="All" bit="0" doc="Synchronize all commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_ALL"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT"/>
      </value>
      <value name="Draw" bit="1" doc="Synchronize draw commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_DRAW"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT|VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT|VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT|VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT|VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT|VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"/>
      </value>
      <value name="IndexInput" bit="2" doc="Synchronize index input commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_INDEX_INPUT"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT"/>
      </value>
      <value name="VertexShading" bit="3" doc="Synchronize vertex shading commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_VERTEX_SHADING"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT"/>
      </value>
      <value name="PixelShading" bit="4" doc="Synchronize pixel shading commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_PIXEL_SHADING"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT"/>
      </value>
      <value name="DepthStencil" bit="5" doc="Synchronize depth stencil commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_DEPTH_STENCIL"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT | VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT"/>
      </value>
      <value name="RenderTarget" bit="6" doc="Synchronize render target commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_RENDER_TARGET"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT"/>
      </value>
      <value name="Compute" bit="7" doc="Synchronize compute commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_COMPUTE_SHADING"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"/>
      </value>
      <value name="Raytracing" bit="8" doc="Synchronize raytracing commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_RAYTRACING"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR"/>
      </value>
      <value name="Copy" bit="9" doc="Synchronize copy commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_COPY"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_COPY_BIT"/>
      </value>
      <value name="Resolve" bit="10" doc="Synchronize resolve commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_RESOLVE"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_COPY_BIT | VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_2_RESOLVE_BIT | VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"/>
      </value>
      <value name="ExecuteIndirect" bit="11" doc="Synchronize execute indirect commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_EXECUTE_INDIRECT"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT | VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"/>
      </value>
      <value name="AllShading" bit="12" doc="Synchronize all shading commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_ALL_SHADING"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT | VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"/>
      </value>
      <value name="NonPixelShading" bit="13" doc="Synchronize non-pixel shading commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_NON_PIXEL_SHADING"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT | VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"/>
      </value>
      <value name="ClearUAV" bit="14" doc="Synchronize clear UAV commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_CLEAR_UNORDERED_ACCESS_VIEW"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT"/>
      </value>
      <value name="VideoDecode" bit="15" doc="Synchronize video decode commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_VIDEO_DECODE"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_VIDEO_DECODE_BIT_KHR"/>
      </value>
      <value name="VideoEncode" bit="16" doc="Synchronize video encode commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_VIDEO_ENCODE"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_VIDEO_ENCODE_BIT_KHR"/>
      </value>
      <value name="BuildRTAS" bit="17" doc="Synchronize build raytracing acceleration structure commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_BUILD_RAYTRACING_ACCELERATION_STRUCTURE"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR"/>
      </value>
      <value name="CopyRTAS" bit="18" doc="Synchronize copy raytracing acceleration structure commands.">
        <impl name="dx" value="D3D12_BARRIER_SYNC_COPY_RAYTRACING_ACCELERATION_STRUCTURE"/>
        <impl name="vk" value="VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR"/>
      </value>
    </type>

    <type name="ResourceAccess" category="bitmask" doc="Resource access flags.
Determine how resource will be accessed. Used in Barriers.">
      <impl_type for="dx" name="D3D12_BARRIER_ACCESS"/>
      <impl_type for="vk" name="VkAccessFlags2"/>
      <value name="Common" value="0" doc="Common access.
Subresource data must be available for any layout-compatible access after a barrier.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_COMMON"/>
        <impl name="vk" value="VK_ACCESS_2_MEMORY_READ_BIT | VK_ACCESS_2_MEMORY_WRITE_BIT"/>
      </value>
      <value name="VertexBuffer" bit="0" doc="Vertex buffer access. Applies only to buffers.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_VERTEX_BUFFER"/>
        <impl name="vk" value="VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT"/>
      </value>
      <value name="ConstantBuffer" bit="1" doc="Constant buffer access. Applies only to buffers.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_CONSTANT_BUFFER"/>
        <impl name="vk" value="VK_ACCESS_2_UNIFORM_READ_BIT"/>
      </value>
      <value name="IndexBuffer" bit="2" doc="Index buffer access. Applies only to buffers.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_INDEX_BUFFER"/>
        <impl name="vk" value="VK_ACCESS_2_INDEX_READ_BIT"/>
      </value>
      <value name="RenderTarget" bit="3" doc="Render target access. Applies only to textures.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_RENDER_TARGET"/>
        <impl name="vk" value="VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT"/>
      </value>
      <value name="UnorderedAccess" bit="4" doc="Unordered access access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_UNORDERED_ACCESS"/>
        <impl name="vk" value="VK_ACCESS_2_SHADER_WRITE_BIT | VK_ACCESS_2_SHADER_READ_BIT"/>
      </value>
      <value name="DepthWrite" bit="5" doc="Depth write access. Applies only to DS textures.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_DEPTH_STENCIL_WRITE"/>
        <impl name="vk" value="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT"/>
      </value>
      <value name="DepthRead" bit="6" doc="Depth read access. Applies only to DS textures.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_DEPTH_STENCIL_READ"/>
        <impl name="vk" value="VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT"/>
      </value>
      <value name="ShaderResource" bit="7" doc="Shader resource access. Applies only to textures.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_SHADER_RESOURCE"/>
        <impl name="vk" value="VK_ACCESS_2_SHADER_READ_BIT"/>
      </value>
      <value name="StreamOutput" bit="8" doc="Stream output access. Applies only to buffers. Reserved for extension.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_STREAM_OUTPUT"/>
        <impl name="vk" value="VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT"/>
      </value>
      <value name="IndirectArgument" bit="9" doc="Indirect argument access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_INDIRECT_ARGUMENT"/>
        <impl name="vk" value="VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT | VK_ACCESS_2_SHADER_READ_BIT"/>
      </value>
      <value name="CopyDest" bit="10" doc="Copy destination access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_COPY_DEST"/>
        <impl name="vk" value="VK_ACCESS_2_TRANSFER_WRITE_BIT"/>
      </value>
      <value name="CopySource" bit="11" doc="Copy source access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_COPY_SOURCE"/>
        <impl name="vk" value="VK_ACCESS_2_TRANSFER_READ_BIT"/>
      </value>
      <value name="ConditionalRendering" bit="12" doc="Conditional rendering access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_PREDICATION"/>
        <impl name="vk" value="VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT"/>
      </value>
      <value name="AccelerationStrucureRead" bit="13" doc="Acceleration structure read access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_READ"/>
        <impl name="vk" value="VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR"/>
      </value>
      <value name="AccelerationStrucureWrite" bit="14"  doc="Acceleration structure write access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_RAYTRACING_ACCELERATION_STRUCTURE_WRITE"/>
        <impl name="vk" value="VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR"/>
      </value>
      <value name="ShadingRate" bit="15" doc="Shading rate access. Used in variable shading rate.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_SHADING_RATE_SOURCE"/>
        <impl name="vk" value="VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR"/>
      </value>
      <value name="VideoDecodeRead" bit="16" doc="Video decode read access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_VIDEO_DECODE_READ"/>
        <impl name="vk" value="VK_ACCESS_2_VIDEO_DECODE_READ_BIT_KHR"/>
      </value>
      <value name="VideoDecodeWrite" bit="17" doc="Video decode write access.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_VIDEO_DECODE_WRITE"/>
        <impl name="vk" value="VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR"/>
      </value>
      <value name="Present" bit="18" doc="Present access. Used fpr swapchain presentation.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_VIDEO_DECODE_WRITE"/>
        <impl name="vk" value="VK_ACCESS_2_VIDEO_DECODE_WRITE_BIT_KHR"/>
      </value>
      <value name="ResolveDest" bit="19" doc="Resolve destination access. Used in multisampling.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_RESOLVE_DEST"/>
        <impl name="vk" value="VK_ACCESS_2_TRANSFER_WRITE_BIT | VK_ACCESS_2_SHADER_WRITE_BIT"/>
      </value>
      <value name="ResolveSource" bit="20" doc="Resolve source access. Used in multisampling.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_RESOLVE_SOURCE"/>
        <impl name="vk" value="VK_ACCESS_2_TRANSFER_READ_BIT | VK_ACCESS_2_SHADER_READ_BIT"/>
      </value>
      <value name="NoAccess" bit="31" doc="No access. Used to indicate no access throughout pipeline.">
        <impl name="dx" value="D3D12_BARRIER_ACCESS_NO_ACCESS"/>
        <impl name="vk" value="VK_ACCESS_2_NONE"/>
      </value>
    </type>

    <type name="RenderPassFlags" category="bitmask" doc="Render pass flags.
Set of flags that affect render pass behavior.
More on render pass flags [here](https://learn.microsoft.com/en-us/windows/win32/direct3d12/direct3d-12-render-passes).">
      <impl_type for="vk" name="VkRenderingFlags"/>
      <impl_type for="dx" name="D3D12_RENDER_PASS_FLAGS"/>
      <value name="None" value="0" doc="No flags set. Render pass is regular."/>
      <value name="Suspending" bit="1" doc="Render pass is suspending.">
        <impl name="dx" value="D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS"/>
        <impl name="vk" value="VK_RENDERING_SUSPENDING_BIT"/>
      </value>
      <value name="Resuming" bit="2" doc="Render pass is resuming.">
        <impl name="dx" value="D3D12_RENDER_PASS_FLAG_RESUMING_PASS"/>
        <impl name="vk" value="VK_RENDERING_RESUMING_BIT"/>
      </value>
    </type>

    <type name="TextureUsage" category="bitmask" doc="Texture usage flags.
Determine how the texture can be used throughout its lifetime.">
      <impl_type for="dx" name="D3D12_RESOURCE_FLAGS"/>
      <impl_type for="vk" name="VkImageUsageFlags"/>
      <value name="None" value="0" doc="No flags set. Texture is not used.">
        <impl name="dx" value="D3D12_RESOURCE_FLAG_NONE"/>
      </value>
      <value name="RenderTarget" bit="0" doc="Texture is used as a render target.">
        <impl name="dx" value="D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET"/>
        <impl name="vk" value="VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT"/>
      </value>
      <value name="DepthStencil" bit="1" doc="Texture is used as a depth stencil buffer.">
        <impl name="dx" value="D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL"/>
        <impl name="vk" value="VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT"/>
      </value>
      <value name="CopySrc" bit="2" doc="Texture is used as a source for copy operations.">
        <impl name="dx" value="D3D12_RESOURCE_FLAG_NONE"/>
        <impl name="vk" value="VK_IMAGE_USAGE_TRANSFER_SRC_BIT"/>
      </value>
      <value name="CopyDst" bit="3" doc="Texture is used as a destination for copy operations.">
        <impl name="dx" value="D3D12_RESOURCE_FLAG_NONE"/>
        <impl name="vk" value="VK_IMAGE_USAGE_TRANSFER_DST_BIT"/>
      </value>
      <value name="ShaderResource" bit="4" doc="Texture is used as a shader resource.">
        <impl name="dx" value="D3D12_RESOURCE_FLAG_NONE"/>
        <impl name="vk" value="VK_IMAGE_USAGE_SAMPLED_BIT"/>
      </value>
      <value name="UnorderedAccess" bit="5" doc="Texture is used as an unordered access resource.">
        <impl name="dx" value="D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS"/>
        <impl name="vk" value="VK_IMAGE_USAGE_STORAGE_BIT"/>
      </value>
      <value name="HostCopy" bit="7" doc="Texture is used for host copy operations. Works with ExtendedAllocation extension.">
        <impl name="dx" value="D3D12_RESOURCE_FLAG_NONE"/>
        <impl name="vk" value="VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT"/>
      </value>
    </type>

    <type name="FenceFlags" category="bitmask" doc="Fence flags for additional fence features">
      <impl_type for="dx" name="D3D12_FENCE_FLAGS"/>
      <value name="None" value="0" doc="No flags set. Fence is regular."/>
      <value name="Shared" bit="0" doc="Fence is shared. Used for sharing fences for single physical device.">
        <impl name="dx" value="D3D12_FENCE_FLAG_SHARED"/>
      </value>
    </type>

  </types>
</registry>
