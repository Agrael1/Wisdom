<?xml version="1.0" encoding="utf-8"?>
<registry>
  <includes>
    <include>enums.xml</include>
  </includes>

  <types comment="Type definitions">
    <type name="FenceView" category="variant" for="Fence">
      <impl name="both">
        <member type="void" name="value" mod="ptr"/>
      </impl>
    </type>
    <type name="BufferView" category="variant" for="Buffer">
      <impl name="both">
        <member type="void" name="value" mod="ptr"/>
      </impl>
    </type>
    <type name="TextureView" category="variant" for="Texture">
      <impl name="dx">
        <member type="void" name="value" mod="ptr"/>
      </impl>
      <impl name="vk">
        <member type="void" name="value" mod="ptr"/>
        <member type="u32" name="value2"/>
        <member type="Size2D" name="value3"/>
      </impl>
    </type>
    <type name="RenderTargetView" category="variant" for="RenderTarget">
      <impl name="both">
        <member type="void" name="value" mod="ptr"/>
      </impl>
    </type>
    <type name="CommandListView" category="variant" for="CommandList">
      <impl name="both">
        <member type="void" name="value" mod="ptr"/>
      </impl>
    </type>
    <type name="ShaderView" category="variant" for="Shader">
      <impl name="dx">
        <member type="void" name="bytecode" mod="ptr"/>
        <member type="u32" name="size_bytes"/>
      </impl>
      <impl name="vk">
        <member type="void" name="value" mod="ptr"/>
      </impl>
    </type>
    <type name="RootSignatureView" category="variant" for="RootSignature">
      <impl name="dx">
        <member type="void" name="value" mod="ptr"/>
      </impl>
      <impl name="vk">
        <member type="void" name="value" mod="ptr"/>
      </impl>
    </type>
    <type name="DescriptorBufferView" category="variant" for="DescriptorBuffer">
      <impl name="dx">
        <member type="void" name="value" mod="ptr"/>
      </impl>
      <impl name="vk">
        <member type="u64" name="value1"/>
        <member type="u32" name="value2"/>
      </impl>
    </type>


    <!--Structs-->
    <type name="Result" category="struct" doc="Main source of communication of operation success.
To check for success compare {::status} with {Status::Ok}.
If there is any error there is {::error} string which is compile-time.
It communicates the source of problems even in Release mode.
The string contains function name and error message.">
      <member type="Status" name="status" default="Ok" doc="Operation status. Compare with {Status::Ok}"/>
      <member type="u8string" name="error" mod="ptr" default="nullptr" doc="Error message. nullptr or 'Operation Succeeded.' if no error."/>
    </type>


    <type name="Size2D" category="struct" doc="2D unsigned size.">
      <member type="u32" name="width"/>
      <member type="u32" name="height"/>
    </type>

    <type name="Size3D" category="struct" doc="3D unsigned size.">
      <member type="u32" name="width"/>
      <member type="u32" name="height"/>
      <member type="u32" name="depth_or_layers" doc="Depth for 3D textures, layers for 2D arrays"/>
    </type>

    <type name="BufferRegion" category="struct" doc="Buffer region for copy operations.">
      <member type="u64" name="src_offset" default="0" doc="Source offset in bytes. Default is 0."/>
      <member type="u64" name="dst_offset" default="0" doc="Destination offset in bytes. Default is 0."/>
      <member type="u64" name="size_bytes" doc="Size of portion of source buffer to take copy from in bytes."/>
    </type>

    <type name="AdapterDesc" category="struct" doc="Adapter description.
Describes hardware driver identificators as well as memory limits.">
      <member type="u8string" name="description" array="256" doc="Adapter description. Contains name of the graphics adapter."/>
      <member type="u32" name="vendor_id" doc="Vendor ID. Can be used to find the correct adapter."/>
      <member type="u32" name="device_id" doc="Device ID. Together with {::vendor_id} uniquely identifies the device."/>
      <member type="u32" name="subsys_id" doc="Unused"/>
      <member type="u32" name="revision" doc="Driver revision. Unused."/>
      <member type="u64" name="dedicated_video_memory" doc="Dedicated video memory in bytes. Used for Default Memory type."/>
      <member type="u64" name="dedicated_system_memory" doc="Dedicated system memory in bytes. Used for Upload and Readback Memory types."/>
      <member type="u64" name="shared_system_memory" doc="Shared system memory in bytes. Used for GPUUpload Memory type."/>
      <member type="u64" name="adapter_id" doc="Adapter unique ID. Can be used to find the correct adapter."/>
      <member type="AdapterFlags" name="flags" doc="Adapter flags. Describe the adapter kind."/>
    </type>

    <type name="InputSlotDesc" category="struct" doc="Input slot description for {InputLayout::}.">
      <member type="u32" name="slot" doc="Input slot number. Must be unique."/>
      <member type="u32" name="stride_bytes" doc="Stride in bytes. Size of one vertex in the slot."/>
      <member type="InputClass" name="input_class" doc="Input class. Defines how the data is read (Per vertex or Per instance)."/>
    </type>

    <type name="InputAttribute" category="struct" doc="Input attribute description for {InputLayout::}.">
      <member type="u32" name="input_slot" doc="Input slot number. Must be unique."/>
      <member type="u8string" name="semantic_name" mod="ptr" doc="Semantic name of the attribute in HLSL. Must be unique."/>
      <member type="u32" name="semantic_index" doc="Semantic index of the attribute in HLSL. Must be unique."/>
      <member type="u32" name="location" doc="Location of the attribute in HLSL. Must be unique."/>
      <member type="DataFormat" name="format" doc="Data format of the attribute."/>
      <member type="u32" name="offset_bytes" doc="Offset in bytes from the beginning of the vertex."/>
    </type>

    <type name="InputLayout" category="struct" doc="Input layout description for {GraphicsPipelineDesc::}.">
      <member type="InputSlotDesc" name="slots" mod="ptr" doc="Input slots array. Made to pick up data from several arrays of vertex data."/>
      <member type="u32" name="slot_count" doc="Input slots count. Max number is 16."/>
      <member type="InputAttribute" name="attributes" mod="ptr" doc="Input attributes array. Describes how the vertex data is read by the HLSL shader."/>
      <member type="u32" name="attribute_count" doc="Input attributes count."/>
    </type>

    <type name="RasterizerDesc" category="struct" doc="Rasterizer description for {GraphicsPipelineDesc::}.">
      <member type="FillMode" name="fill_mode" default="Solid" doc="Fill mode. Solid or Wireframe. Default is {FillMode::Solid}."/>
      <member type="CullMode" name="cull_mode" default="Back" doc="Cull mode. None, Front, Back. Default is {CullMode::Back}."/>
      <member type="WindingOrder" name="front_face" default="Clockwise" doc="Front face winding order. Clockwise or CounterClockwise. Default is {WindingOrder::Clockwise}."/>
      <member type="bool" name="depth_bias_enable" default="false" doc="Depth bias enable. Default is false."/>
      <member type="f32" name="depth_bias" default="0.0f" doc="Depth bias. Default is 0.0f."/>
      <member type="f32" name="depth_bias_clamp" default="0.0f" doc="Depth bias clamp. Default is 0.0f."/>
      <member type="f32" name="depth_bias_slope_factor" default="0.0f" doc="Depth bias slope factor e.g. for shadows. Default is 0.0f."/>
      <member type="bool" name="depth_clip_enable" default="true" doc="Depth clip enable. Default is true."/>
    </type>

    <type name="SampleDesc" category="struct" doc="Sample description of Multisampling for {GraphicsPipelineDesc::}.">
      <member type="SampleRate" name="rate" default="S1" doc="Sample rate. Default is {SampleRate::S1}."/>
      <member type="f32" name="quality" default="0.0f" doc="Sample quality. Default is 0.0f."/>
      <member type="u32" name="sample_mask" default="0xffffffff" doc="Sample mask. Default is 0xffffffff."/>
    </type>

    <type name="StencilDesc" category="struct" doc="Stencil description for {DepthStencilDesc::}.">
      <member type="StencilOp" name="fail_op" default="Keep" doc="Stencil operation if the stencil test fails. Default is {StencilOp::Keep}."/>
      <member type="StencilOp" name="depth_fail_op" default="Keep" doc="Stencil operation if the stencil test passes and the depth test fails. Default is {StencilOp::Keep}."/>
      <member type="StencilOp" name="pass_op" default="Keep" doc="Stencil operation if the stencil test passes. Default is {StencilOp::Keep}."/>
      <member type="Compare" name="comparison" default="Always" doc="Stencil comparison function. Default is {Compare::Always}."/>
      <member type="u8" name="read_mask" default="0xff" doc="Stencil read mask. Default is 0xff."/>
      <member type="u8" name="write_mask" default="0xff" doc="Stencil write mask. Default is 0xff."/>
    </type>

    <type name="DepthStencilDesc" category="struct" doc="Depth stencil description for {GraphicsPipelineDesc::}.">
      <member type="bool" name="depth_enable" default="false" doc="Depth test enable. Default is false."/>
      <member type="bool" name="depth_write_enable" default="false" doc="Depth write enable. Default is false."/>
      <member type="Compare" name="depth_comp" default="Less" doc="Depth comparison function. Default is {Compare::Less}."/>
      <member type="bool" name="stencil_enable" default="false" doc="Stencil test enable. Default is false."/>
      <member type="StencilDesc" name="stencil_front" default="{}" doc="Stencil description for front faces."/>
      <member type="StencilDesc" name="stencil_back" default="{}" doc="Stencil description for back faces."/>
      <member type="bool" name="depth_bound_test" default="false" doc="Depth bound test enable. Default is false."/>
    </type>

    <type name="BlendAttachmentDesc" category="struct" doc="Blend attachment description for {BlendStateDesc::}.">
      <member type="bool" name="blend_enable" default="false" doc="Blend enable. Default is false."/>
      <member type="BlendFactor" name="src_color_blend" default="One" doc="Source color blend factor. Default is {BlendFactor::One}."/>
      <member type="BlendFactor" name="dst_color_blend" default="Zero" doc="Destination color blend factor. Default is {BlendFactor::Zero}."/>
      <member type="BlendOp" name="color_blend_op" default="Add" doc="Color blend operation. Default is {BlendOp::Add}."/>
      <member type="BlendFactor" name="src_alpha_blend" default="One" doc="Source alpha blend factor. Default is {BlendFactor::One}."/>
      <member type="BlendFactor" name="dst_alpha_blend" default="Zero" doc="Destination alpha blend factor. Default is {BlendFactor::Zero}."/>
      <member type="BlendOp" name="alpha_blend_op" default="Add" doc="Alpha blend operation. Default is {BlendOp::Add}."/>
      <member type="ColorComponents" name="color_write_mask" default="All" doc="Color write mask. Default is {ColorComponents::All}."/>
    </type>

    <type name="BlendStateDesc" category="struct" doc="Blend state description for {GraphicsPipelineDesc::}.">
      <member type="bool" name="logic_op_enable" default="false" doc="Logic operation enable. Default is false."/>
      <member type="LogicOp" name="logic_op" default="Noop" doc="Logic operation. Default is {LogicOp::Noop}."/>
      <member type="BlendAttachmentDesc" name="attachments" array="8" doc="Blend attachment descriptions. Max Array size is 8."/>
      <member type="u32" name="attachment_count" doc="Blend attachment count."/>
    </type>

    <type name="RenderAttachmentsDesc" category="struct" doc="Render attachments description for {GraphicsPipelineDesc::}.">
      <member type="DataFormat" name="attachment_formats" mod="ptr" doc="Attachment formats array. Describes the format of the render target."/>
      <member type="u32" name="attachments_count" doc="Attachment formats count."/>
      <member type="DataFormat" name="depth_attachment" doc="Depth attachment format. Describes the format of the depth buffer."/>
    </type>

    <type name="DebugCallback" category="delegate" doc="Debug callback delegate. Used for Library internal log messages.">
      <arg type="Severity" name="severity" doc="Severity of the message. Depend on WISDOM_LOG_LEVEL option."/>
      <arg type="u8string" name="message" mod="ptr" doc="Message string."/>
      <arg type="void" name="user_data" mod="ptr" doc="User data pointer."/>
    </type>

    <type name="RootConstant" category="struct" doc="Root constant description for {RootSignatureDesc::}.">
      <member type="ShaderStages" name="stage" doc="Shader stage. Defines the stage where the constant is used."/>
      <member type="u32" name="size_bytes" doc="Size of the constant in bytes."/>
    </type>

    <type name="SwapchainDesc" category="struct" doc="Swapchain description for {SwapChain::} creation.">
      <member type="Size2D" name="size" doc="Swapchain texture size."/>
      <member type="DataFormat" name="format" doc="Swapchain texture format."/>
      <member type="u32" name="buffer_count" doc="Swapchain buffer count."/>
      <member type="bool" name="stereo" doc="Stereo mode enable. If there is no stereo in the system will be ignored."/>
      <member type="bool" name="vsync" doc="VSync enable. Specifies Initial VSync. This value may be changed on per-present bases with {DeviceFeature::DynamicVSync}."/>
      <member type="bool" name="tearing" doc="Tearing enable. If VSync is disabled, Tearing may be enabled. If System does not allow tearing the flag is ignored."/>
    </type>

    <type name="TextureDesc" category="struct" doc="Texture description for {Texture::} creation.">
      <member type="DataFormat" name="format" doc="Texture pixel/block format."/>
      <member type="Size3D" name="size" doc="Texture size. Third dimension may be used for array layers or depth layers, depending on {::layout}."/>
      <member type="u32" name="mip_levels" default="1" doc="Mip levels count. Default is 1."/>
      <member type="TextureLayout" name="layout" default="Texture2D" doc="Texture layout. Default is {TextureLayout::Texture2D}."/>
      <member type="SampleRate" name="sample_count" default="S1" doc="Sample count. Default is {SampleRate::S1}."/>
      <member type="TextureUsage" name="usage" default="None" doc="Texture usage flags."/>
    </type>

    <type name="AllocationInfo" category="struct" doc="Allocation info for Resource Allocation.">
      <member type="u64" name="size_bytes" doc="Size of the allocation in bytes."/>
      <member type="u64" name="alignment_bytes" doc="Alignment of the allocation in bytes."/>
    </type>


    <type name="TextureRegion" category="struct" doc="Texture region for copy operations.">
      <member type="Size3D" name="offset" doc="Offset in the texture in pixels.
In BufferToTexture determines offset of destination texture.
In TextureToBuffer - offset of source image."/>
      <member type="Size3D" name="size" doc="Size of the region in pixels."/>
      <member type="u32" name="mip" doc="Mip level of the texture."/>
      <member type="u32" name="array_layer" doc="Array layer of the texture."/>
      <member type="DataFormat" name="format" doc="Format of the texture."/>
    </type>

    <type name="BufferTextureCopyRegion" category="struct" doc="Buffer to texture copy region.">
      <member type="u64" name="buffer_offset" doc="Buffer offset in bytes."/>
      <member type="TextureRegion" name="texture" doc="Texture region."/>
    </type>

    <type name="PushDescriptor" category="struct" doc="Push descriptor. Unused for now.">
      <member type="ShaderStages" name="stage"/>
      <member type="u32" name="bind_register"/>
      <member type="DescriptorType" name="type"/>
      <member type="u32" name="reserved"/>
    </type>

    <type name="SubresourceRange" category="struct" doc="Subresource range for {TextureBarrier::}.">
      <member type="u32" name="base_mip_level" doc="Base mip level."/>
      <member type="u32" name="level_count" doc="Mip levels count."/>
      <member type="u32" name="base_array_layer" doc="Base array layer."/>
      <member type="u32" name="layer_count" doc="Array layers count."/>
    </type>

    <type name="RenderTargetDesc" category="struct" doc="Render target description for {RenderTarget::} creation.">
      <member type="DataFormat" name="format" doc="Render target format."/>
      <member type="TextureLayout" default="Texture2D" name="layout" doc="Render target layout. Default is {TextureLayout::Texture2D}."/>
      <member type="u32" name="mip" default="0" doc="Mip level of the render target. Default is 0."/>
      <member type="u32" name="base_array_layer" default="0" doc="Base array layer of the render target. Default is 0."/>
      <member type="u32" name="layer_count" default="1" doc="Array layers count of the render target. Default is 1."/>
    </type>

    <type name="Viewport" category="struct" doc="Viewport description for {CommandList::}.
Viewport is considered from Top Left corner.">
      <member type="f32" name="top_leftx" doc="Top left corner x coordinate."/>
      <member type="f32" name="top_lefty" doc="Top left corner y coordinate."/>
      <member type="f32" name="width" doc="Viewport width."/>
      <member type="f32" name="height" doc="Viewport height."/>
      <member type="f32" name="min_depth" doc="Minimum depth of the viewport."/>
      <member type="f32" name="max_depth" doc="Maximum depth of the viewport."/>
    </type>

    <type name="Scissor" category="struct" doc="Scissor description for {CommandList::}.">
      <member type="i32" name="left" doc="Left corner x coordinate."/>
      <member type="i32" name="top" doc="Top corner y coordinate."/>
      <member type="i32" name="right" doc="Right corner x coordinate."/>
      <member type="i32" name="bottom" doc="Bottom corner y coordinate."/>
    </type>

    <type name="BufferBarrier" category="struct" doc="Buffer barrier for {CommandList::}.">
      <member type="BarrierSync" name="sync_before" doc="Synchronization before the barrier."/>
      <member type="BarrierSync" name="sync_after" doc="Synchronization after the barrier."/>
      <member type="ResourceAccess" name="access_before" doc="Resource access before the barrier."/>
      <member type="ResourceAccess" name="access_after" doc="Resource access after the barrier."/>
      <member type="u64" name="offset" default ="0" doc="Offset in the buffer in bytes. Default is 0."/>
      <member type="u64" name="size" default="UINT64_MAX" doc="Size of the buffer in bytes. Default is UINT64_MAX, which means entire buffer."/>
    </type>

    <type name="TextureBarrier" category="struct" doc="Texture barrier for {CommandList::}.">
      <member type="BarrierSync" name="sync_before" doc="Synchronization before the barrier."/>
      <member type="BarrierSync" name="sync_after" doc="Synchronization after the barrier."/>
      <member type="ResourceAccess" name="access_before" doc="Resource access before the barrier."/>
      <member type="ResourceAccess" name="access_after" doc="Resource access after the barrier."/>
      <member type="TextureState" name="state_before" doc="Texture state before the barrier."/>
      <member type="TextureState" name="state_after" doc="Texture state after the barrier."/>
      <member type="SubresourceRange" name="subresource_range" doc="Subresource range of the texture."/>
    </type>

    <type name="DescriptorTableEntry" category="struct" doc="Descriptor table entry for {DescriptorTable::}.">
      <member type="DescriptorType" name="type" doc="Descriptor type."/>
      <member type="u32" name="bind_register" doc="Bind register number in HLSL."/>
      <member type="u32" name="binding" doc="Binding number in HLSL."/>
      <member type="u32" name="count" doc="Descriptor count for Array descriptors."/>
    </type>

    <type name="DescriptorTable" category="struct" doc="Descriptor table for {RootSignatureDesc::}.">
      <member type="DescriptorHeapType" name="type" doc="Descriptor heap type. Either Descriptor or Sampler."/>
      <member type="DescriptorTableEntry" name="entries" mod="ptr" doc="Descriptor table entries array."/>
      <member type="u32" name="entry_count" doc="Descriptor table entries count."/>
      <member type="ShaderStages" name="stage" doc="Shader stage. Defines the stage where the table is used."/>
    </type>

    <type name="SamplerDesc" category="struct" doc="Sampler description for {Sampler::} creation.">
      <member type="Filter" name="min_filter" doc="Minification filter."/>
      <member type="Filter" name="mag_filter" doc="Magnification filter."/>
      <member type="Filter" name="mip_filter" doc="Mip level filter."/>
      <member type="bool" name="anisotropic" doc="Anisotropic filtering enable."/>
      <member type="u32" name="max_anisotropy" doc="Max anisotropy level. Max is 16."/>
      <member type="AddressMode" name="address_u" doc="Address mode for U coordinate."/>
      <member type="AddressMode" name="address_v" doc="Address mode for V coordinate."/>
      <member type="AddressMode" name="address_w" doc="Address mode for W coordinate."/>
      <member type="f32" name="min_lod" doc="Min LOD value."/>
      <member type="f32" name="max_lod" doc="Max LOD value."/>
      <member type="f32" name="mip_lod_bias" doc="Mip LOD bias value."/>
      <member type="Compare" name="comparison_op" doc="Comparison operation for comparison samplers."/>
      <member type="f32" name="border_color" array="4" doc="Border color."/>
    </type>

    <type name="ComponentMapping" category="struct" doc="Component mapping for {ShaderResourceDesc::}.">
      <member type="ComponentSwizzle" name="r" default="Red" doc="Component mapping for Red channel. Default is {ComponentSwizzle::Red}."/>
      <member type="ComponentSwizzle" name="g" default="Green" doc="Component mapping for Green channel. Default is {ComponentSwizzle::Green}."/>
      <member type="ComponentSwizzle" name="b" default="Blue" doc="Component mapping for Blue channel. Default is {ComponentSwizzle::Blue}."/>
      <member type="ComponentSwizzle" name="a" default="Alpha" doc="Component mapping for Alpha channel. Default is {ComponentSwizzle::Alpha}."/>
    </type>

    <type name="ShaderResourceDesc" category="struct" doc="Shader resource description for {RootSignatureDesc::}.">
      <member type="DataFormat" name="format" doc="Resource format."/>
      <member type="TextureViewType" name="view_type" doc="Resource view type."/>
      <member type="ComponentMapping" name="component_mapping" doc="Component mapping."/>
      <member type="SubresourceRange" name="subresource_range" doc="Subresource range of the resource."/>
    </type>

    <type name="FactoryExtQuery" category="struct" doc="Struct used to query the extensions for C code.
Queried results should not be freed, their lifetime ends with the Factory they were created with.
If {::extension_id} is 0, {::result} must be populated with already created extension.
Otherwise extension is ignored.">
      <member type="FactoryExtID" name="extension_id" doc="Extension ID."/>
      <member type="void" name="result" mod="ptr" doc="Result of the query.
Pointer is populated with the extension with queried ID.
If the extension is not supported/failed to initialize the result is NULL."/>
    </type>
    
    <type name="DeviceExtQuery" category="struct" doc="Struct used to query the extensions for C code.
Queried results should not be freed, their lifetime ends with the Factory they were created with.
If {::extension_id} is 0, {::result} must be populated with already created extension.
Otherwise extension is ignored.">
      <member type="DeviceExtID" name="extension_id" doc="Extension ID."/>
      <member type="void" name="result" mod="ptr" doc="Result of the query.
Pointer is populated with the extension with queried ID.
If the extension is not supported/failed to initialize the result is NULL."/>
    </type>

    <!--Variants-->
    <type name="BufferBarrier2" category="variant" doc="Variant of BufferBarrier with BufferView.">
      <impl name="both">
        <member type="BufferBarrier" name="barrier" doc="Buffer barrier."/>
        <member type="BufferView" name="buffer" doc="Buffer view."/>
      </impl>
    </type>

    <type name="TextureBarrier2" category="variant" doc="Variant of TextureBarrier with TextureView.">
      <impl name="both">
        <member type="TextureBarrier" name="barrier" doc="Texture barrier."/>
        <member type="TextureView" name="texture" doc="Texture view."/>
      </impl>
    </type>

    <type name="GraphicsShaderStages" category="variant" doc="Variant of ShaderView for all graphics stages.">
      <impl name="both">
        <member type="ShaderView" name="vertex" doc="Vertex shader."/>
        <member type="ShaderView" name="hull" doc="Hull shader."/>
        <member type="ShaderView" name="domain" doc="Domain shader."/>
        <member type="ShaderView" name="geometry" doc="Geometry shader."/>
        <member type="ShaderView" name="pixel" doc="Pixel shader."/>
      </impl>
    </type>

    <type name="GraphicsPipelineDesc" category="variant" doc="Variant of PipelineStateDesc for graphics pipeline.">
      <impl name="both">
        <member type="RootSignatureView" name="root_signature" doc="Root signature."/>
        <member type="InputLayout" name="input_layout" doc="Input layout."/>
        <member type="GraphicsShaderStages" name="shaders" doc="Shader stages."/>
        <member type="RenderAttachmentsDesc" name="attachments" doc="Render attachments."/>
        <member type="RasterizerDesc" name="rasterizer" mod="ptr" default="nullptr" doc="Rasterizer description."/>
        <member type="SampleDesc" name="sample" mod="ptr" default="nullptr" doc="Sample description."/>
        <member type="BlendStateDesc" name="blend" mod="ptr" default="nullptr" doc="Blend state description."/>
        <member type="DepthStencilDesc" name="depth_stencil" mod="ptr" default="nullptr" doc="Depth stencil description."/>
        <member type="TopologyType" name="topology_type" default="Triangle" doc="Topology type. Default is {TopologyType::Triangle}."/>
      </impl>
    </type>

    <type name="RenderPassRenderTargetDesc" category="variant" doc="Variant of RenderPassDesc for render target.">
      <impl name="both">
        <member type="RenderTargetView" name="target" doc="Render target view."/>
        <member type="LoadOperation" name="load_op" default="Load" doc="Load operation on beginning of render pass. Default is {LoadOperation::Load}."/>
        <member type="StoreOperation" name="store_op" default="Store" doc="Store operation on end of render pass. Default is {StoreOperation::Store}."/>
        <member type="f32" name="clear_value" array="4" doc="Clear value for {LoadOperation::Clear}."/>
      </impl>
    </type>

    <type name="RenderPassDepthStencilDesc" category="variant" doc="Variant of RenderPassDesc for depth stencil.">
      <impl name="both">
        <member type="RenderTargetView" name="target" doc="Depth stencil view."/>
        <member type="LoadOperation" name="load_op_depth" default="Load" doc="Load operation on beginning of render pass for depth. Default is {LoadOperation::Load}."/>
        <member type="LoadOperation" name="load_op_stencil" default="Load" doc="Load operation on beginning of render pass for stencil. Default is {LoadOperation::Load}."/>
        <member type="StoreOperation" name="store_op_depth" default="Store" doc="Store operation on end of render pass for depth. Default is {StoreOperation::Store}."/>
        <member type="StoreOperation" name="store_op_stencil" default="Store" doc="Store operation on end of render pass for stencil. Default is {StoreOperation::Store}."/>
        <member type="DSSelect" name="depth_stencil_select" default="None" doc="Depth stencil select. Default is {DSSelect::None}."/>
        <member type="f32" name="clear_depth" default="1.0f" doc="Clear depth value for {LoadOperation::Clear}. Default is 1.0f."/>
        <member type="u8" name="clear_stencil" default="0" doc="Clear stencil value for {LoadOperation::Clear}. Default is 0."/>
      </impl>
    </type>

    <type name="RenderPassDesc" category="variant" doc="Variant of PipelineStateDesc for render pass.">
      <impl name="both">
        <member type="RenderPassFlags" name="flags" doc="Render pass flags."/>
        <member type="u32" name="target_count" doc="Render target count."/>
        <member type="RenderPassRenderTargetDesc" name="targets" mod="ptr" default="nullptr" doc="Render target descriptions."/>
        <member type="RenderPassDepthStencilDesc" name="depth_stencil" mod="ptr" default="nullptr" doc="Depth stencil description."/>
      </impl>
    </type>

    <type name="VertexBufferBinding" category="variant" doc="Variant of BufferView for vertex buffer binding.">
      <impl name="both">
        <member type="BufferView" name="buffer" doc="Buffer view."/>
        <member type="u32" name="size" doc="Size of the buffer in bytes."/>
        <member type="u32" name="stride" doc="Stride of the buffer in bytes."/>
      </impl>
    </type>
  </types>
</registry>
